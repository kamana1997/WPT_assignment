-> Front end library
-> React generates the JS, HTML,CSS code for browser.
-> It is SPA (Single Page Application) 
like in Gmail we switch between inbox and spams page remains same does'nt reloads but ui changes.


-> Two phases:
    1. Development phase 
    2. Production phase

Development Phase:
-> If project is in dev phase
-> React use Development server.
-> this development server helps in continuosly changing the ui and get generated html,css,js code.

Production Phase
-> If project is released and deployed on server for public.
-> The seprate dev react server is demolished and merged into express backend server.
-> here we pick up the genrated code and simply use it for production env.


Commands:
-> npx create-react-app first-react
-> npm start

Note: We have to work in src folder

public/index.html -> src/index.js -> App.js(Component) -> we will keep all user defined components

-> in the initial phases do not touch any file befor app.js as it may cause 
   issues hard to fix.
-> So start working in App.js

JSX
-> similiar to HTML but more restric rules and got extra features
-> Close all tags mandatory like br also in this way: <br/>
-> Comments:  {/*comment here*/}
-> Expression: {expressionHere} it must return something example:
   {a+b} it will return sum of a and b
   {x.toLowerCase()} it will return x to a lower case string
   also if we have defined a var say var name = Hardik so we can use this value as
   {name}
-> write attributs in camel casing like onClick={}

Rules:
-> Component name must start with upper case. example App component(function name not file name)
-> component name and file name should be same (changing possible).
-> inside return we can write JSX.
-> the outer tag can be only one as we can have only one root tag and no adjacent tag with the 
   parent tag.[like in our App.js the div tag is the parent tag and we can only add sub elemets
   like div k andr div]
-> JSX must be inside return statement

Importing Components:
import componentName "path"
then use component as JSX
<Component>
</Component>

or <Component />
eample: 
<Hello></Hello>


State 
-> State is used to retain the value and re-render the component if
   value is changed

import {useState} from "react"

var [state,setState] = useState(DefaultValue);

-> state is variable and setState is function name
-> access value directly by state variable.
-> but assign value by setState function and this fn will re-render compnent also
-> setState simply assigns value and rerender page.
-> set is compulsary prefix for functionName.

